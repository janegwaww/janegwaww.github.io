:PROPERTIES:
:ID:       99c90788-6d86-4c96-b322-3545af67c3f5
:END:
#+startup: showall
#+options: toc:nil

* 分享最近阅读的书籍清单（七）

这些都是在人生中的好书藉或好内容，我想把这些优秀的东西分享出来，并赋上自己的一些主观想法，能让更多人知道并从中受益。这里只是做一个引荐，精彩需要你自己亲自拜读从中感受。

#+toc: headlines

#+begin_quote
子曰：学而时习之，不亦悦乎，有朋自远方来，不亦乐乎，人不知而不愠，不亦君子乎。

--论语学而第一
#+end_quote

** 罗织经[fn:1]

#+begin_quote
人之情多矫，世之俗多伪，岂可信乎？

--摘要
#+end_quote

如何做一个好人从来都不是一件简单的事，如果无法分辨善恶就有可能助纣为虐。生活中这样的例子数不胜数，职场中的话术（PUA）而有人欢欣鼓舞、有人自责不够努力; 社交网络中的随波逐流没有自己的观点等等。不是说我们不能帮助他人，而是要懂得其中的人情事故。这本书赤裸裸的将人性中的恶淋漓尽致的展现出来，让我们知道坏人是怎么做的，读他的目地不在于怎么去做一个坏人，而是如何成为一个好人。25年9月份，翟欣欣案宣判之后当事人已经跳楼8年了，如果苏某能坚守本心，知道坏人的计俩并做出相应的对策，他还会绝望到跳楼么？

什么是人情，太史公说夫人情莫不贪生恶死，人情很简单就四个字：贪生恶死，就这么简单。物欲横流、贪图美色、取妻生子，追逐名利这是贪生。荣华富贵、锦衣玉食、功名利禄、逍遥自在这是恶死。我不相信有人能拒绝夸奖，我也不相信有人会喜欢恶语相向。历史上有很多看似很反常的事，其实考虑下人情就能看懂了，太史公以记传体写史记也是以人为本。我相信太史公是一个伟大的史学家，但是绝对不是一个好的政治家，在为李陵游说这个事情上，他在《报任少卿书》中是这么说的：仆怀欲陈之，而未有路，适召会问，即以此言陵功。我们很好奇，武帝早不问晚不问，为什么偏偏会在这个时候问他意见，古代的朝堂之上不是人人都有机会发言的。我想武帝做为一个精明的政治家应该是看到了司马迁那蠢蠢欲动的表情，然后当时也没有任何人敢说话，所以武帝就让他发言了，武帝当时可能也是希望他能说些场面话好有台阶下，但是司马迁他看不到这些，他只想一心为李陵说好话保住这个千古名将，也没有观察到武帝表情的变化，侃侃而谈最终酿成惨剧。而精明的武帝想的不是李陵多么多么的好，而是你在指桑骂槐，在嘲讽他用人不善。又或者战国非常有名的一场战争长平之战，当时秦国的强大是人人都知道的，但是为什么当时的赵孝成王还敢临阵换将，把廉颇给换下来了，这在一场战争中是非常忌讳的事情，打战打到一半把将军给换下来了除非有非常大的把握，但是显然赵国不是。我们不分析战争，只分析赵孝成王这个人，赵孝成王他很有雄才大略接受了大臣的意见接收了上党郡，而不是固守国土做一方霸主，而这就是关键，这就是我们常说的年轻人不气盛还叫年轻人吗。赵孝成王当时很年轻，想有一方作为，而在强大的秦国阴影之下很难有作为，当时他可能也从政不久对很多事情都要听老人的意见，所以也让他过的很憋屈，而赵括也是年轻人，两个年轻人想要在这些老人中有所作为，但是这些老人是知道秦国的可怕的，两个年轻人可能还意识不到，这个代价是很大的，大到赵国从此再也起不来了。想想我们自己年轻的时候是不是也放纵过，只是代价没这么大。

我想太史公作史记，写了很多事件，也把自己的亲身经历一五一十的写出来，也是想告诉后来的读书人不要犯同样的错误。罗织经以论语公冶长第五中的：“巧言、令色、足恭，左丘明耻之，丘亦耻之。”开头，并以此伸展开共讲述了阅人、事上、治下、控权、制敌、固荣、保身、察奸、谋划、问罪、刑罚、瓜蔓十二卷。而这本书也是总结了酷隶整人的结大成之作，给后面的坏人作参考，而它之所以叫经是因为只要人性不变这些整人的手段就一直有效，而天底下的坏人也逃不出这个框架，不会再有什么新意了。

** From Mathematics to Generic Programming[fn:2]

#+begin_center
从数学到泛型编程
#+end_center

#+begin_quote
如果你不懂数学你就很难了解这个世界的全貌。

--Roger Bacon, Opus Majus
#+end_quote

泛型编程是一种编程方法，它主要聚焦于设计算法和数据结构，因此不管是任何语言任何工具他都能高效的完成工作。它体现在C++中就是templates, java中就是type paramters, js中就是typescript, haskell中就是type classes..。它并不体现在某一种语言或某一个工具中，它是一种编程泛式，以一种通用的方法来达成目标，是更接近于数学的编程方法，或者说更接近于数学的[[https:https://en.wikipedia.org/wiki/Abstract_algebra][abstract algebra]]。而编程本身又是更多的从数学中演化而来的，例如欧几里德的几何原本求最大值，演化为编程中max方法等。而我相信泛式编程是所有工程师都应必配的技巧，是使你构建的软件更加强大和坚固的设计模式。

这本书先简单的介绍了一些数学方法的知识，然后再一步一步讲解如何用编程语言去实现它，主要使用的是C++，它对于数学方面比较匮乏的程序员来说是一本不错的入门数学编程方面的好书。就像这本书所说的：要成为一名优秀的程序员，您需要了解通用编程的原理。要了解通用编程的原理，您需要了解抽象。要了解抽象，您需要了解它的基础：数学。

** Google generative AI learning path[fn:3]

#+begin_center
Google生成式AI学习路径
#+end_center

#+begin_quote
人工智能有时会“产生幻觉”。如果我们想有效地利用它，就必须意识到它的局限性，并做好应对的准备。

--Emmanuel Maggiori
#+end_quote

主要是因为现在AI太流行了，似乎有替换掉搜索引擎的趋势，但是作为技术从业者，缺的从来都不是更优秀的技术，因为我们很清楚，技术一直都会叠代下去，总会有更好的技术出现，我们缺的都是人文关怀。人在工作方面是不可能超越技术的，但是在人文关怀方面永远也是技术做不到的，我们需要做的不是去排挤它，而是去利用他为我们做事，技术说到底就是工具，人作为演化了几亿年的生物，技术暂时还是做不到的像人一样的。而人文就像指南针，指导着未来的技术将走向何方。

Google生成式AI学习路径更像是一本说明书，教你如何使用google的AI技术。如果AI对你来说还是比较新鲜的事物，那这个的全方位教学，视频加大纲加练习是一个不错的入门AI的免费课程。

** The Chrysanthemum and the Sword[fn:4]

#+begin_center
菊与刀
#+end_center

#+begin_quote

#+end_quote

** 毓老师说论语[fn:5]

#+begin_quote
牧师都离婚了，受戒的和尚都开了荤，掌教者都不知耻，真不知明年又变成什么样了？

--摘要
#+end_quote

现在解读经典的太多了，而可能与经典想要表达的意思大相径庭了，这就违背了经典的初衷。他们的存在是为了答疑解惑，不是让人引经据典。毓老师是一个真正的儒者，他从小熟读四书五经，提出以经解经。这是只有熟读经典的人才能做到，也是非常有说服力的说法。而这些经典，这些四书五经，这本论语，为什么让人念念不忘，因为中国无王无圣久矣。而对于一个理工生来说，太需要这样的人文关怀了。

** Structure and Interpretation of Computer Programs — Comparison Edition[fn:6]

#+begin_center
计算机程序的结构和解释-JS版
#+end_center

#+begin_quote

#+end_quote

程序的构造与解释这本书在行业中已经是非常有名的了，而JS版又能给出什么新意呢？

** Haskell Programming from first principles[fn:7]

#+begin_center
从第一原理开始学习Haskell编程
#+end_center

#+begin_quote

#+end_quote

** Continuous Integration (CI) and Continuous Delivery (CD)-A Practical Guide to Designing and Developing Pipelines[fn:8]

#+begin_center
持续集成 (CI) 和持续交付 (CD)：设计和开发管道的实用指南
#+end_center

** Podman in Action[fn:9]

#+begin_center
Podman实战指南
#+end_center

#+begin_quote
大约在10年前docker的出现，引发了人们在互联网上分发和运行应用程序方式的革命。当我在研究Docker时，我觉得它可以设计得更好。

--摘要
#+end_quote

工具的出现是为人们能够轻松的解决问题，你不需要去深究工具背后的原理。而作为一本工具使用指南，这本书也做了很好的指导，从简单的使用试范到更多更杂的功能，从容器的建造到启动，再到pod,系统命令，安全性。而podman对于docker的优势就在于他的安全性上，这本书也做了重点说明。

** The Kubernetes Book[fn:10]

#+begin_center
Kubernates入门书
#+end_center

#+begin_quote
教育是启发智慧和创造机会。我希望这本书，和我的讲解视频，能够启发你为你带来更多机会。

--摘要
#+end_quote

docker被发明出来之后下一步是什么?这些是许多公司在应用容器技术之后顺便会面临的问题.

* 相关阅读

- [[file:recent_reading.org::*分享最近阅读的书籍清单（一）][分享最近阅读的书籍清单(一)]]
- [[file:recent_reading2.zh.org::*分享最近阅读的书籍清单(二)][分享最近阅读的书籍清单(二)]]
- [[file:recent_reading3.zh.org::*分享最近阅读的书藉清单(三)][分享最近阅读的书藉清单(三)]]
- [[file:recent_reading4.zh.org::*分享最近阅读的书籍清单(四)][分享最近阅读的书籍清单(四)]]
- [[file:recent_reading5.zh.org][分享最近阅读的书籍清单(五)]]
- [[file:recent_reading5.zh.org][分享最近阅读的书籍清单(六)]]

* 我想评论

[[https://github.com/janegwaww/janegwaww.github.io/issues][github issues]]

* 写在后面
#+include: "../footer.zh.org"

* Footnotes

[fn:1] https://zh.wikisource.org/zh-hant/%E7%BE%85%E7%B9%94%E7%B6%93

[fn:2] https://www.fm2gp.com/

[fn:3] https://www.cloudskillsboost.google/paths/118

[fn:4] https://book.douban.com/subject/1022238/

[fn:5] https://book.douban.com/subject/26770154/

[fn:6] https://sicp.sourceacademy.org/

[fn:7] https://haskellbook.com/

[fn:8] [[https://www.amazon.com/Continuous-Integration-Delivery-Practical-Developing/dp/1484292278][A Practical Guide to Designing and Developing Pipelines]]

[fn:9] https://www.manning.com/books/podman-in-action

[fn:10] https://leanpub.com/thekubernetesbook
